Readme - Comparative Risk Assessment Web Application

Introduction:
This is a Python-based web application for conducting a comparative risk assessment of potential locations for a warehouse/distribution and manufacturing center. The application allows users to input qualitative data and associated weightings for different threat areas and generates a graphical comparison of the risk levels for each location. The application uses the Flask web framework for the backend and Chart.js for data visualization.

Requirements:

Python 3.x
Flask
Chart.js
Installation and Execution:

Clone or download the repository to your local machine.
Open a terminal or command prompt and navigate to the directory containing the application files.
Install Flask and other required libraries (if not already installed) using the following command:
Copy code
pip install Flask
Set the FLASK_APP environment variable to app.py. On Windows, use the following command:

Copy code
set FLASK_APP=app.py
On macOS/Linux, use:


Copy code
export FLASK_APP=app.py
(Optional) Enable the debug mode to auto-reload the application on changes:


Copy code
set FLASK_ENV=development    (Windows)
export FLASK_ENV=development (macOS/Linux)
Start the Flask application:


Copy code
flask run
Access the application in your web browser at http://localhost:5000.
Usage:

Once the application is running, the home page will be displayed with input fields for qualitative data and weightings for different threat areas.

Enter the numerical values (based on qualitative assessments) and weightings for each threat area in the provided input fields.

Click the "Calculate" button to generate the risk assessment comparison.
The application will process the data and display a radar chart showing the comparative risk levels for each location.

Code Structure:

app.py: The main Python script containing the Flask application code. It defines the routes for handling user requests and generating the risk assessment results.
templates/index.html: The HTML template for the user interface, including the input form for entering data.

templates/result.html: The HTML template for displaying the risk assessment results in the form of a radar chart.

Screenshots:

Screenshots of the application in operation can be found in the attached "screenshots" folder.
Linter Evaluation Reports:

The code has been checked with a linter, and the evaluation report is available in the attached "linter_evaluation_report.txt" file.

References:

The application uses Flask for the web framework (https://flask.palletsprojects.com/).
Chart.js is used for data visualization (https://www.chartjs.org/).

Important Note:

This application is intended for educational and demonstration purposes only. The risk assessment results generated by the application should not be used for real-world decision-making without proper consultation with experts and relevant data sources.

Conclusion:

This Python-based web application provides a simple and interactive platform for performing comparative risk assessments of potential warehouse/distribution and manufacturing center locations. The application's user-friendly interface and graphical representation of risk levels aid users in making informed decisions based on risk assessments. By following the installation and execution instructions, users can easily run the application and explore different scenarios for risk evaluation. For any inquiries or issues, feel free to contact the developer.
